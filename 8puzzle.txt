Function print_in_format(matrix):
    For i from 0 to 8:
        If i%3==0 and i > 0:
            Print a new line
        Print the element at matrix[i] with a space at the end

Function count(s):
    c = 0 <- Initialise c to count the no. of misplaced tiles
    Ideal = [1, 2, 3,   <- Goal state
             4, 5, 6,
             7, 8, 0]   
    For i from 0 to 8:
        If s[i] != 0 and s[i] != Ideal[i]:
            Increment c by 1

    Return c  <- Return the count of misplaced tiles

Function move(ar, p, st):
    rh = 9999 <- Initialise rh as a large Value
    store_st = st.copy() <- Initialize store_st as a copy of st
    
    For i from 0 to length of ar:
        dupl_st = st.copy() <- Initialize dupl_st as a copy of st
    
        Swap elements at positions p and ar[i] in dupl_st
        
        trh = count(dupl_st) <- Initialise trh to calculate heuristic value from dupl_st
        
        If trh is less than rh:
            Set rh as trh
            Set store_st as a copy of dupl_st
    
    Return store_st and rh  <- Return the new state and updated heuristic value

# Driver Code
state = [1, 2, 3,  <- Initial state
         0, 4, 6,
         7, 5, 8]   
h = count(state)  <- Initialise h for Heuristic value for the initial state
Level = 1 <- Initialise Level for each level of calculation of state and heruistic value

Print "------ Level " + str(Level) + " ------"
Call print_in_format(state)
Print "Heuristic Value(Misplaced): " + h

While h is greater than 0:
    pos = Find the index of 0 in state
    Increment Level by 1
    
    If pos is 0:
        arr = [1, 3]
        state, h = move(arr, pos, state)
    Else if pos is 1:
        arr = [0, 2, 4]
        state, h = move(arr, pos, state)
    Else if pos is 2:
        arr = [1, 5]
        state, h = move(arr, pos, state)
    Else if pos is 3:
        arr = [0, 4, 6]
        state, h = move(arr, pos, state)
    Else if pos is 4:
        arr = [1, 3, 5, 7]
        state, h = move(arr, pos, state)
    Else if pos is 5:
        arr = [2, 4, 8]
        state, h = move(arr, pos, state)
    Else if pos is 6:
        arr = [3, 7]
        state, h = move(arr, pos, state)
    Else if pos is 7:
        arr = [4, 6, 8]
        state, h = move(arr, pos, state)
    Else if pos is 8:
        arr = [5, 7]
        state, h = move(arr, pos, state)
    
    Print "------ Level " + str(Level) + " ------"
    Call print_in_format(state)
    Print "Heuristic Value(Misplaced): " + h